name: Build Wheels

permissions:
  contents: read

on:
  push:
    tags:
      - v*
  workflow_dispatch:

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-24.04, macos-14, windows-2022]

    steps:
      - uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.13"

      - name: Install tooling
        run: |
          python -m pip install -U pip
          pip install uv cibuildwheel==2.16.2 cyclonedx-bom syft cosign

      - name: Resolve & sync dependencies
        run: |
          uv pip compile pyproject.toml -o constraints.txt --generate-hashes || echo "uv compile not available, skipping"
          uv sync || pip install -e .

      - name: Build wheels
        run: python -m cibuildwheel --output-dir wheelhouse
        env:
          CIBW_BUILD: cp38-* cp39-* cp310-* cp311-* cp312-* cp313-*
          CIBW_SKIP: pp* *-musllinux_i686 *_i686 *-win32
          CIBW_ARCHS_MACOS: x86_64 arm64
          CIBW_ARCHS_LINUX: x86_64 aarch64
          CIBW_ARCHS_WINDOWS: AMD64
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux_2_28
          CIBW_MANYLINUX_AARCH64_IMAGE: manylinux_2_28
          CIBW_TEST_COMMAND: python -c "import chiron; print(getattr(chiron,'__version__','dev'))"

      - name: Generate SBOM (CycloneDX)
        run: |
          cyclonedx-py --format json -o wheelhouse/sbom-cyclonedx.json .
          echo "✅ CycloneDX SBOM generated"
        continue-on-error: true

      - name: Generate SBOM (Syft)
        run: |
          syft wheelhouse -o cyclonedx-json=wheelhouse/sbom-syft.json
          echo "✅ Syft SBOM generated"
        continue-on-error: true

      - name: Scan vulnerabilities (OSV)
        run: |
          # Install osv-scanner if not available
          if ! command -v osv-scanner &> /dev/null; then
            curl -sSfL https://github.com/google/osv-scanner/releases/latest/download/osv-scanner_linux_amd64 -o /usr/local/bin/osv-scanner
            chmod +x /usr/local/bin/osv-scanner
          fi
          osv-scanner --sbom=wheelhouse/sbom-cyclonedx.json --format json > wheelhouse/osv.json || echo "⚠️  OSV scan completed with findings"
          echo "✅ OSV vulnerability scan completed"
        continue-on-error: true

      - name: Scan vulnerabilities (Grype)
        run: |
          # Install grype if available
          if command -v grype &> /dev/null; then
            grype sbom:wheelhouse/sbom-cyclonedx.json -o json > wheelhouse/grype.json || echo "⚠️  Grype scan completed with findings"
            echo "✅ Grype vulnerability scan completed"
          else
            echo "ℹ️  Grype not available, skipping"
          fi
        continue-on-error: true

      - name: Bundle wheelhouse
        run: |
          python - <<'PY'
          import hashlib, tarfile, json, os
          fn="wheelhouse.tar.gz"
          with tarfile.open(fn,"w:gz") as tar:
              tar.add("wheelhouse", arcname="wheelhouse")
          h=hashlib.sha256(open(fn,"rb").read()).hexdigest()
          open("wheelhouse.sha256","w").write(f"{h}  {fn}\n")
          meta={"commit":"${{ github.sha }}", "ref": "${{ github.ref }}"}
          open("wheelhouse.meta.json","w").write(json.dumps(meta,indent=2))
          PY

      - name: Sign artifacts (Sigstore/Cosign keyless)
        run: |
          # Sign the wheelhouse bundle
          cosign sign-blob --yes --bundle wheelhouse.tar.gz.sigstore.json wheelhouse.tar.gz || echo "⚠️  Signing failed"
          # Sign individual wheels for verification
          for wheel in wheelhouse/*.whl; do
            [ -f "$wheel" ] || continue
            cosign sign-blob --yes --bundle "${wheel}.sigstore.json" "$wheel" || echo "⚠️  Signing $wheel failed"
          done
          echo "✅ Artifact signing completed"
        env:
          COSIGN_EXPERIMENTAL: "1"
        continue-on-error: true

      - name: Generate SLSA Provenance metadata
        run: |
          # Generate basic provenance metadata (full SLSA requires separate job)
          python - <<'PY'
          import json, hashlib, os
          from datetime import datetime

          provenance = {
            "buildType": "https://github.com/Chiron/wheel-build@v1",
            "subject": [{
              "name": "wheelhouse.tar.gz",
              "digest": {"sha256": open("wheelhouse.sha256").read().split()[0]}
            }],
            "metadata": {
              "buildStartedOn": datetime.utcnow().isoformat() + "Z",
              "completeness": {"parameters": True, "environment": True, "materials": True},
            },
            "materials": [{
              "uri": f"git+https://github.com/${{ github.repository }}@${{ github.sha }}",
              "digest": {"sha1": "${{ github.sha }}"}
            }]
          }

          with open("wheelhouse/provenance.json", "w") as f:
            json.dump(provenance, f, indent=2)

          print("✅ Basic provenance metadata generated")
          PY
        continue-on-error: true

      - name: Upload wheels and attestations
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: |
            ./wheelhouse/*.whl
            ./wheelhouse/*.whl.sigstore.json
            wheelhouse.tar.gz
            wheelhouse.tar.gz.sigstore.json
            wheelhouse.sha256
            wheelhouse.meta.json
            wheelhouse/sbom-*.json
            wheelhouse/osv.json
            wheelhouse/grype.json
            wheelhouse/provenance.json

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.13"

      - name: Install build
        run: python -m pip install build

      - name: Build sdist
        run: python -m build --sdist

      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz

name: Quality Gates

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  FORCE_COLOR: "1"
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  MINIMUM_COVERAGE: "50"
  TARGET_COVERAGE: "60"
  FRONTIER_COVERAGE: "80"

jobs:
  # Coverage Quality Gate
  coverage-gate:
    name: Coverage Quality Gate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: pyproject.toml

      - name: Set up Python
        run: uv python install 3.12

      - name: Install dependencies
        run: uv sync

      - name: Run tests with coverage
        run: |
          uv run pytest --cov=chiron --cov-report=xml --cov-report=term-missing --cov-fail-under=${{ env.MINIMUM_COVERAGE }}

      - name: Check coverage improvement target
        run: |
          COVERAGE=$(uv run coverage report | grep TOTAL | awk '{print $NF}' | sed 's/%//')
          echo "Current coverage: ${COVERAGE}%"
          if (( $(echo "$COVERAGE >= ${{ env.TARGET_COVERAGE }}" | bc -l) )); then
            echo "‚úÖ Coverage meets target of ${{ env.TARGET_COVERAGE }}%"
          else
            echo "‚ö†Ô∏è  Coverage below target (${{ env.TARGET_COVERAGE }}%), but above minimum gate (${{ env.MINIMUM_COVERAGE }}%)"
          fi
          if (( $(echo "$COVERAGE >= ${{ env.FRONTIER_COVERAGE }}" | bc -l) )); then
            echo "üéØ FRONTIER GRADE: Coverage exceeds ${{ env.FRONTIER_COVERAGE }}%!"
          fi

      - name: Upload coverage reports
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage.xml
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

  # Security Quality Gate - Zero Critical Vulnerabilities
  security-gate:
    name: Security Quality Gate
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Set up Python
        run: uv python install 3.12

      - name: Install dependencies
        run: uv sync

      - name: Run Bandit security scan
        run: |
          uv run bandit -r src/ -f json -o bandit-report.json
          CRITICAL_COUNT=$(jq '[.results[] | select(.issue_severity == "HIGH" or .issue_severity == "CRITICAL")] | length' bandit-report.json)
          echo "Critical/High severity issues: $CRITICAL_COUNT"
          if [ "$CRITICAL_COUNT" -gt 0 ]; then
            echo "‚ùå SECURITY GATE FAILED: Found $CRITICAL_COUNT critical/high severity issues"
            jq '.results[] | select(.issue_severity == "HIGH" or .issue_severity == "CRITICAL")' bandit-report.json
            exit 1
          else
            echo "‚úÖ SECURITY GATE PASSED: No critical/high severity issues found"
          fi
        continue-on-error: false

      - name: Run Safety vulnerability scan
        run: |
          uv run safety check --json --output safety-report.json || true
          if [ -f safety-report.json ]; then
            VULN_COUNT=$(jq 'length' safety-report.json 2>/dev/null || echo "0")
            echo "Known vulnerabilities found: $VULN_COUNT"
            if [ "$VULN_COUNT" -gt 0 ]; then
              echo "‚ö†Ô∏è  Found vulnerabilities - review required"
              jq '.' safety-report.json
            else
              echo "‚úÖ No known vulnerabilities found"
            fi
          fi

      - name: Run Semgrep security scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: auto
          generate-sarif-file: semgrep.sarif

      - name: Upload SARIF results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif

  # Type Safety Quality Gate
  type-safety-gate:
    name: Type Safety Quality Gate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Set up Python
        run: uv python install 3.12

      - name: Install dependencies
        run: uv sync

      - name: Run MyPy type checking
        run: |
          uv run mypy src/chiron --strict
          echo "‚úÖ TYPE SAFETY GATE PASSED: No type errors found"

  # SBOM Quality Gate
  sbom-gate:
    name: SBOM Quality Gate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Set up Python
        run: uv python install 3.12

      - name: Install dependencies
        run: uv sync

      - name: Install Syft
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin

      - name: Generate SBOM
        run: |
          syft . -o cyclonedx-json=sbom.json
          syft . -o spdx-json=sbom-spdx.json
          echo "‚úÖ SBOM GATE PASSED: SBOM generated successfully"

      - name: Validate SBOM format
        run: |
          if jq -e . sbom.json >/dev/null 2>&1; then
            COMPONENT_COUNT=$(jq '.components | length' sbom.json)
            echo "SBOM contains $COMPONENT_COUNT components"
            if [ "$COMPONENT_COUNT" -gt 0 ]; then
              echo "‚úÖ SBOM validation passed"
            else
              echo "‚ùå SBOM validation failed: No components found"
              exit 1
            fi
          else
            echo "‚ùå SBOM validation failed: Invalid JSON"
            exit 1
          fi

      - name: Install Grype
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin

      - name: Scan SBOM for vulnerabilities
        run: |
          grype sbom:./sbom.json -o json --file vulnerability-report.json
          CRITICAL_VULNS=$(jq '[.matches[] | select(.vulnerability.severity == "Critical")] | length' vulnerability-report.json)
          HIGH_VULNS=$(jq '[.matches[] | select(.vulnerability.severity == "High")] | length' vulnerability-report.json)
          
          echo "Critical vulnerabilities: $CRITICAL_VULNS"
          echo "High vulnerabilities: $HIGH_VULNS"
          
          if [ "$CRITICAL_VULNS" -gt 0 ]; then
            echo "‚ùå VULNERABILITY GATE FAILED: Found $CRITICAL_VULNS critical vulnerabilities"
            jq '[.matches[] | select(.vulnerability.severity == "Critical")]' vulnerability-report.json
            exit 1
          else
            echo "‚úÖ VULNERABILITY GATE PASSED: No critical vulnerabilities"
          fi

      - name: Upload SBOM artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sbom-reports
          path: |
            sbom.json
            sbom-spdx.json
            vulnerability-report.json

  # Code Quality Gate
  code-quality-gate:
    name: Code Quality Gate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Set up Python
        run: uv python install 3.12

      - name: Install dependencies
        run: uv sync

      - name: Run Ruff linter
        run: |
          uv run ruff check src/chiron --output-format=json > ruff-report.json || true
          ERROR_COUNT=$(jq 'length' ruff-report.json)
          echo "Linting issues found: $ERROR_COUNT"
          if [ "$ERROR_COUNT" -gt 0 ]; then
            echo "‚ùå CODE QUALITY GATE FAILED: Found $ERROR_COUNT linting issues"
            jq '.' ruff-report.json
            exit 1
          else
            echo "‚úÖ CODE QUALITY GATE PASSED: No linting issues"
          fi

      - name: Run Ruff formatter check
        run: |
          uv run ruff format --check src/chiron
          echo "‚úÖ Code formatting check passed"

  # Test Quality Gate
  test-quality-gate:
    name: Test Quality Gate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Set up Python
        run: uv python install 3.12

      - name: Install dependencies
        run: uv sync

      - name: Run tests
        run: |
          uv run pytest --json-report --json-report-file=test-report.json

      - name: Validate test results
        run: |
          TOTAL_TESTS=$(jq '.summary.total' test-report.json)
          PASSED_TESTS=$(jq '.summary.passed' test-report.json)
          FAILED_TESTS=$(jq '.summary.failed // 0' test-report.json)
          
          echo "Total tests: $TOTAL_TESTS"
          echo "Passed tests: $PASSED_TESTS"
          echo "Failed tests: $FAILED_TESTS"
          
          if [ "$FAILED_TESTS" -gt 0 ]; then
            echo "‚ùå TEST QUALITY GATE FAILED: $FAILED_TESTS tests failed"
            exit 1
          fi
          
          if [ "$TOTAL_TESTS" -lt 100 ]; then
            echo "‚ö†Ô∏è  Test count below recommended minimum (100), current: $TOTAL_TESTS"
          fi
          
          echo "‚úÖ TEST QUALITY GATE PASSED: All $PASSED_TESTS tests passed"

  # Dependency Quality Gate
  dependency-gate:
    name: Dependency Quality Gate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Set up Python
        run: uv python install 3.12

      - name: Check for dependency conflicts
        run: |
          uv sync --locked
          echo "‚úÖ DEPENDENCY GATE PASSED: No dependency conflicts"

      - name: Validate pyproject.toml
        run: |
          python3 -c "import tomllib; tomllib.load(open('pyproject.toml', 'rb'))"
          echo "‚úÖ pyproject.toml is valid TOML"

  # Documentation Quality Gate
  docs-gate:
    name: Documentation Quality Gate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Set up Python
        run: uv python install 3.12

      - name: Install dependencies
        run: uv sync --group docs || uv sync

      - name: Check documentation builds
        run: |
          if [ -f mkdocs.yml ]; then
            uv run mkdocs build --strict
            echo "‚úÖ DOCS GATE PASSED: Documentation builds successfully"
          else
            echo "‚ö†Ô∏è  No mkdocs.yml found, skipping docs build"
          fi

  # Overall Quality Gate Summary
  quality-gate-summary:
    name: Quality Gate Summary
    runs-on: ubuntu-latest
    needs:
      - coverage-gate
      - security-gate
      - type-safety-gate
      - sbom-gate
      - code-quality-gate
      - test-quality-gate
      - dependency-gate
      - docs-gate
    if: always()
    steps:
      - name: Check gate results
        run: |
          echo "Quality Gate Results:"
          echo "===================="
          echo "Coverage Gate: ${{ needs.coverage-gate.result }}"
          echo "Security Gate: ${{ needs.security-gate.result }}"
          echo "Type Safety Gate: ${{ needs.type-safety-gate.result }}"
          echo "SBOM Gate: ${{ needs.sbom-gate.result }}"
          echo "Code Quality Gate: ${{ needs.code-quality-gate.result }}"
          echo "Test Quality Gate: ${{ needs.test-quality-gate.result }}"
          echo "Dependency Gate: ${{ needs.dependency-gate.result }}"
          echo "Documentation Gate: ${{ needs.docs-gate.result }}"
          
          # Count failures
          FAILED=0
          [[ "${{ needs.coverage-gate.result }}" == "failure" ]] && ((FAILED++))
          [[ "${{ needs.security-gate.result }}" == "failure" ]] && ((FAILED++))
          [[ "${{ needs.type-safety-gate.result }}" == "failure" ]] && ((FAILED++))
          [[ "${{ needs.sbom-gate.result }}" == "failure" ]] && ((FAILED++))
          [[ "${{ needs.code-quality-gate.result }}" == "failure" ]] && ((FAILED++))
          [[ "${{ needs.test-quality-gate.result }}" == "failure" ]] && ((FAILED++))
          [[ "${{ needs.dependency-gate.result }}" == "failure" ]] && ((FAILED++))
          [[ "${{ needs.docs-gate.result }}" == "failure" ]] && ((FAILED++))
          
          if [ $FAILED -gt 0 ]; then
            echo "‚ùå $FAILED quality gate(s) failed"
            exit 1
          else
            echo "‚úÖ All quality gates passed - FRONTIER GRADE!"
          fi

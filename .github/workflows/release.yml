name: Release

on:
  push:
    tags:
      - "v*"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write
  id-token: write
  attestations: write

env:
  FORCE_COLOR: "1"
  PIP_DISABLE_PIP_VERSION_CHECK: "1"

jobs:
  build:
    name: Build distribution
    runs-on: ubuntu-latest
    outputs:
      hashes: ${{ steps.hash.outputs.hashes }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Set up Python
        run: uv python install 3.12

      - name: Build distribution
        run: |
          uv build

      - name: Generate SBOM
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
          syft dist/ -o cyclonedx-json=dist/sbom.json
          syft dist/ -o spdx-json=dist/sbom-spdx.json

      - name: Generate hashes
        id: hash
        run: |
          cd dist && echo "hashes=$(sha256sum * | base64 -w0)" >> "$GITHUB_OUTPUT"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

  build-wheels:
    name: Build wheels
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up QEMU (for ARM builds)
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Build wheels
        uses: pypa/cibuildwheel@v3.2.0
        env:
          CIBW_BUILD: cp39-* cp310-* cp311-* cp312-*
          CIBW_SKIP: "*-win32 *-manylinux_i686 *-musllinux_i686"
          CIBW_ARCHS_LINUX: x86_64 aarch64
          CIBW_ARCHS_MACOS: x86_64 arm64
          CIBW_ARCHS_WINDOWS: x86_64
          CIBW_BUILD_VERBOSITY: 1

      - name: Upload wheel artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: wheelhouse/*.whl

  provenance:
    name: Generate SLSA provenance
    runs-on: ubuntu-latest
    needs: [build]
    permissions:
      actions: read
      id-token: write
      contents: write

    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.1.0
    with:
      base64-subjects: "${{ needs.build.outputs.hashes }}"

  sign:
    name: Sign artifacts with Sigstore
    runs-on: ubuntu-latest
    needs: [build, build-wheels]
    permissions:
      id-token: write

    steps:
      - name: Download distributions
        uses: actions/download-artifact@v4
        with:
          pattern: "*"
          merge-multiple: true
          path: dist/

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3

      - name: Sign distributions
        run: |
          find dist/ -type f \( -name "*.whl" -o -name "*.tar.gz" -o -name "*.json" \) | xargs cosign sign-blob --yes --bundle

      - name: Upload signed artifacts
        uses: actions/upload-artifact@v4
        with:
          name: signed-distributions
          path: dist/

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [build, build-wheels, provenance, sign]
    environment:
      name: pypi
      url: https://pypi.org/p/chiron
    permissions:
      id-token: write

    steps:
      - name: Download distributions
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Download wheels
        uses: actions/download-artifact@v4
        with:
          pattern: "wheels-*"
          merge-multiple: true
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          attestations: true

  publish-github:
    name: Publish to GitHub Releases
    runs-on: ubuntu-latest
    needs: [build, build-wheels, provenance, sign]
    permissions:
      contents: write

    steps:
      - name: Download distributions
        uses: actions/download-artifact@v4
        with:
          pattern: "*"
          merge-multiple: true
          path: dist/

      - name: Download provenance
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.provenance.outputs.provenance-name }}
          path: dist/

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*
          generate_release_notes: true
          body: |
            ## What's Changed

            This release includes signed artifacts with SLSA provenance and SBOM.

            ### Verification

            You can verify the integrity of the artifacts using:
            ```bash
            # Install cosign
            go install github.com/sigstore/cosign/v2/cmd/cosign@latest

            # Verify signatures
            cosign verify-blob --bundle <artifact>.sigstore.json <artifact>
            ```

            ### SBOM

            Software Bill of Materials (SBOM) is included in both CycloneDX and SPDX formats.

  create-wheelhouse:
    name: Create wheelhouse bundle
    runs-on: ubuntu-latest
    needs: [build, build-wheels, sign]

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: "*"
          merge-multiple: true
          path: wheelhouse/

      - name: Create wheelhouse archive
        run: |
          cd wheelhouse
          # Create a simple index for pip
          python -m pip install --no-deps --target . pip
          python -c "
          import os
          from pathlib import Path

          # Generate simple index.html for offline pip installs
          wheels = list(Path('.').glob('*.whl'))
          with open('index.html', 'w') as f:
              f.write('<html><body><h1>Chiron Wheelhouse</h1>')
              for wheel in wheels:
                  f.write(f'<a href=\"{wheel.name}\">{wheel.name}</a><br>')
              f.write('</body></html>')
          "
          tar czf ../chiron-wheelhouse-$(date +%Y%m%d).tar.gz .

      - name: Upload wheelhouse
        uses: actions/upload-artifact@v4
        with:
          name: wheelhouse-bundle
          path: chiron-wheelhouse-*.tar.gz

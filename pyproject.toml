[build-system]
requires = ["hatchling>=1.21.0"]
build-backend = "hatchling.build"

[project]
name = "chiron"
version = "0.1.0"
description = "Frontier-grade, production-ready Python library and service"
authors = [{ name = "Jonathan Bowers", email = "jonathan@example.com" }]
maintainers = [{ name = "Jonathan Bowers", email = "jonathan@example.com" }]
readme = "README.md"
license = { text = "MIT" }
keywords = ["library", "service", "security", "observability", "sbom"]
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: Security",
  "Topic :: System :: Monitoring",
]
requires-python = ">=3.12"
dependencies = [
  "fastapi>=0.118.0",
  "uvicorn[standard]>=0.37.0",
  "pydantic>=2.11.9",
  "opentelemetry-api>=1.37.0",
  "opentelemetry-sdk>=1.37.0",
  "opentelemetry-instrumentation-fastapi>=0.42b0",
  "opentelemetry-exporter-otlp>=1.37.0",
  "click>=8.3.0",
  "structlog>=25.4.0",
  "rich>=14.1.0",
]

[project.optional-dependencies]
cli = ["typer>=0.19.2", "jsonschema>=4.25.1"]
service = ["gunicorn>=23.0.0"]
observability = [
  "opentelemetry-api>=1.37.0",
  "opentelemetry-sdk>=1.37.0",
  "opentelemetry-exporter-otlp>=1.37.0",
  "opentelemetry-instrumentation-fastapi>=0.42b0",
  "opentelemetry-instrumentation-logging>=0.42b0",
  "opentelemetry-instrumentation-requests>=0.42b0",
]
otel = [
  "opentelemetry-api>=1.37.0",
  "opentelemetry-sdk>=1.37.0",
  "opentelemetry-exporter-otlp>=1.37.0",
  "opentelemetry-instrumentation-fastapi>=0.42b0",
  "opentelemetry-instrumentation-logging>=0.42b0",
  "opentelemetry-instrumentation-requests>=0.42b0",
]
pii = [
  "spacy>=3.8.7",
  "spacy-transformers>=1.3.9",
  "huggingface-hub>=0.35.3",
  "sentence-transformers>=5.1.1",
]
rag = [
  "langchain>=0.3.27",
  "chromadb>=1.1.0",
  "qdrant-client>=1.15.1",
  "faiss-cpu>=1.12.0",
]
llm = [
  "openai>=2.1.0",
  "anthropic>=0.69.0",
  "google-generativeai>=0.8.5",
  "cohere>=5.18.0",
]
governance = [
  "policyuniverse>=1.5.1.20231109",
  "jsonschema>=4.25.1",
  "pyyaml>=6.0.3",
]
integrations = [
  "boto3>=1.40.45",
  "azure-identity>=1.25.0",
  "google-cloud-storage>=3.4.0",
  "snowflake-connector-python>=3.17.4",
]
features = ["openfeature-sdk>=0.7.0"]
docs = [
  "mkdocs>=1.6.1",
  "mkdocs-material>=9.6.21",
  "mkdocstrings[python]>=0.30.1",
]
security = [
  "cyclonedx-bom>=7.1.0",
  "safety>=3.6.2",
  "bandit>=1.8.6",
  "semgrep>=1.139.0",
]
dev = [
  "pytest>=8.4.2",
  "pytest-cov>=7.0.0",
  "pytest-asyncio>=1.2.0",
  "pytest-mock>=3.15.1",
  "hypothesis>=6.140.2",
  "mypy>=1.18.2",
  "ruff>=0.13.3",
  "pre-commit>=4.3.0",
  "uv>=0.8.22",
]
test = ["pact-python>=2.3.3", "httpx>=0.28.1", "pytest-benchmark>=5.1.0"]
all = [
  "typer>=0.19.2",
  "jsonschema>=4.25.1",
  "openfeature-sdk>=0.7.0",
  "gunicorn>=23.0.0",
  "opentelemetry-api>=1.37.0",
  "opentelemetry-sdk>=1.37.0",
  "opentelemetry-exporter-otlp>=1.37.0",
  "opentelemetry-instrumentation-fastapi>=0.42b0",
  "opentelemetry-instrumentation-logging>=0.42b0",
  "opentelemetry-instrumentation-requests>=0.42b0",
  "spacy>=3.8.7",
  "spacy-transformers>=1.3.9",
  "huggingface-hub>=0.35.3",
  "sentence-transformers>=5.1.1",
  "langchain>=0.3.27",
  "chromadb>=1.1.0",
  "qdrant-client>=1.15.1",
  "faiss-cpu>=1.12.0",
  "openai>=2.1.0",
  "anthropic>=0.69.0",
  "google-generativeai>=0.8.5",
  "cohere>=5.18.0",
  "policyuniverse>=1.5.1.20231109",
  "pyyaml>=6.0.3",
  "boto3>=1.40.45",
  "azure-identity>=1.25.0",
  "google-cloud-storage>=3.4.0",
  "snowflake-connector-python>=3.17.4",
  "mkdocs>=1.6.1",
  "mkdocs-material>=9.6.21",
  "mkdocstrings[python]>=0.30.1",
  "cyclonedx-bom>=7.1.0",
  "safety>=3.6.2",
  "bandit>=1.8.6",
  "semgrep>=1.139.0",
  "pytest>=8.4.2",
  "pytest-cov>=7.0.0",
  "pytest-asyncio>=1.2.0",
  "pytest-mock>=3.15.1",
  "hypothesis>=6.140.2",
  "mypy>=1.18.2",
  "ruff>=0.13.3",
  "pre-commit>=4.3.0",
  "uv>=0.8.22",
  "pact-python>=2.3.3",
  "httpx>=0.28.1",
  "pytest-benchmark>=5.1.0",
]

[project.urls]
"Homepage" = "https://github.com/IAmJonoBo/Chiron"
"Bug Reports" = "https://github.com/IAmJonoBo/Chiron/issues"
"Source" = "https://github.com/IAmJonoBo/Chiron"
"Documentation" = "https://github.com/IAmJonoBo/Chiron/docs"

[project.scripts]
chiron = "chiron.cli.main:cli"

[project.entry-points."chiron.plugins"]
# Plugin system for extensibility
# example = "chiron.plugins.example:ExamplePlugin"

[tool.hatch.version]
path = "src/chiron/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["src/chiron"]

[tool.hatch.build.targets.sdist]
include = ["src/", "tests/", "docs/", "pyproject.toml", "README.md", "LICENSE"]

# Testing configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
  "--strict-config",
  "--strict-markers",
  "--cov=chiron",
  "--cov-report=term-missing",
  "--cov-report=html",
  "--cov-report=xml",
  "--cov-fail-under=50",
]
markers = [
  "slow: marks tests as slow",
  "integration: marks tests as integration tests",
  "contract: marks tests as contract tests",
  "security: marks tests as security tests",
]

# Type checking configuration
[tool.mypy]
python_version = "3.12"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
implicit_reexport = false
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

# Linting and formatting configuration
[tool.ruff]
target-version = "py312"
line-length = 88
select = [
  "E",   # pycodestyle errors
  "W",   # pycodestyle warnings
  "F",   # pyflakes
  "I",   # isort
  "B",   # flake8-bugbear
  "C4",  # flake8-comprehensions
  "UP",  # pyupgrade
  "ARG", # flake8-unused-arguments
  "SIM", # flake8-simplify
  "ICN", # flake8-import-conventions
  "S",   # flake8-bandit (security)
]
ignore = [
  "E501", # line too long, handled by black
  "B008", # do not perform function calls in argument defaults
  "S101", # use of assert
]

[tool.ruff.per-file-ignores]
"tests/**/*" = ["S101", "ARG", "SIM"]

[tool.ruff.isort]
known-first-party = ["chiron"]

# Coverage configuration
[tool.coverage.run]
source = ["src/chiron"]
omit = [
  "src/chiron/deps/*",
  "src/chiron/doctor/*",
  "src/chiron/remediation/*",
  "src/chiron/tools/*",
  "src/chiron/observability/*",
  "src/chiron/typer_cli.py",
]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "if self.debug:",
  "if settings.DEBUG",
  "raise AssertionError",
  "raise NotImplementedError",
  "if 0:",
  "if __name__ == .__main__.:",
  "class .*\\bProtocol\\):",
  "@(abc\\.)?abstractmethod",
]

# Security scanning configuration
[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101"]         # Skip assert_used test

[tool.safety]
ignore = []

# Documentation configuration
[tool.mkdocs]
site_name = "Chiron Documentation"
site_description = "Frontier-grade, production-ready Python library and service"
site_url = "https://github.com/IAmJonoBo/Chiron"
repo_url = "https://github.com/IAmJonoBo/Chiron"
repo_name = "IAmJonoBo/Chiron"

# Semantic release configuration
[tool.semantic_release]
version_toml = ["pyproject.toml:project.version"]
branch = "main"
upload_to_pypi = true
upload_to_release = true
build_command = "uv build"

[tool.semantic_release.changelog]
template_dir = "templates"
changelog_file = "CHANGELOG.md"

[tool.semantic_release.commit_parser_options]
allowed_tags = [
  "build",
  "chore",
  "ci",
  "docs",
  "feat",
  "fix",
  "perf",
  "style",
  "refactor",
  "test",
]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]

# cibuildwheel configuration
[tool.cibuildwheel]
build = "cp38-* cp39-* cp310-* cp311-* cp312-* cp313-*"
skip = "pp* *-musllinux_i686 *_i686 *-win32"
test-command = "python -c \"import chiron; print(getattr(chiron,'__version__','dev'))\""

[tool.cibuildwheel.linux]
# Use manylinux_2_28 for frontier spec (glibc 2.28+)
manylinux-x86_64-image = "manylinux_2_28"
manylinux-aarch64-image = "manylinux_2_28"
repair-wheel-command = "auditwheel repair -w {dest_dir} {wheel}"

[tool.cibuildwheel.macos]
archs = ["x86_64", "arm64"]
repair-wheel-command = "delocate-wheel -w {dest_dir} -v {wheel}"

[tool.cibuildwheel.windows]
archs = ["AMD64"]
before-build = "pip install delvewheel"
repair-wheel-command = "delvewheel repair -w {dest_dir} {wheel}"
